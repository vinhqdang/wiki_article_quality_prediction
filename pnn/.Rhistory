y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm (y~x)
data (mtcars)
lm (mtcars$mpg ~ mtcars$weight)
mtcars
lm (mtcars$mpg ~ mtcars$wt)
?transform
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
airquality
library(datasets)
mtcars
boxplot(mtcars$mpg ~ mtcars$cyl, mtcars, xlab = "Cylinders", ylab = "Mileage (mpg)")
curve(3^x)
curve(x^0.5)
curve(x^(1/x))
curve(x^(-1/x))
curve(x^(-x))
curve(1/x)
curve(e^x)
curve(exp(x))
curve(exp(1/x))
curve(exp(10/x))
curve(exp(1000/x))
curve(exp(100/x))
curve(exp(50/x))
exp(-1)
exp(0)
exp(-10000000)
install.packages ("knit")
install.packages("ggplot2")
pnorm (8,mean=0,sd=1)
pnorm (1,mean=0,sd=1)
1 - pnorm (8,mean=0,sd=1)
1 - pnorm (8,mean=0,sd=sqrt(9+16))
mytable <- table (2,2)
mytable
data <- matrix (c(237,685, 26, 112), ncol = 2, byrow = TRUE)
mytable <- as.table (data)
mytable
assocstats(mytable)
library(vcd)
library("vcd")
install.packages ("vcd")
assocstats(mytable)
library("vcd")
assocstats(mytable)
mytable
data2 <- matrix (c(553, 129, 126, 498, 10, 46, 544, 172, 72, 287, 7, 13), ncol = 3, byrow = TRUE)
table2 <- as.table (data2)
table2
install.packages (vcdExtra)
install.packages ("vcdExtra")
library ("vcdExtra")
GKgamma (table2)
library ("rapport")
install.packages ("rapport")
library ("rapport")
lambda.test (table2)
sum (table2)
install.packages("plyr")
install.packages("plyr")
install.packages ("plyr")
install.packages ("swirl")
p = 0.9
p^92
comb = function(n, x) {
return(factorial(n) / (factorial(x) * factorial(n-x)))
}
p^92*(1-p)^8*comb(8,100)
p^92*comb(8,100)
p^92*(1-p)^8*93*94*95*96*97*98*99*100/1/2/3/4/5/6/7/8
0.055 * 0.99
0.055 * 0.99 + (1- 0.055) * 0.005
0.05445 / 0.059175
p = 0.07
1-0.93^7
1-0.93^10
23*61
77*73
1403 / (1403+ 5621)
pbinom (49, size = 169, prob = 0.28)
1 -pbinom (49, size = 169, prob = 0.28)
1 -pbinom (49, size = 160, prob = 0.28)
1 - pbinom (49, 160, 0.28)
a = 4                249  129  29  27   9  2
2                288  180  46  22  10  5
1                385  245  37  37  13  9
0                437  239  44  39  16  7
5                197  125  20  13   3  3
3                327  175  32  39   8  5
beta = 0
beta1 = seq (0,1,by=0.1)
beta1
delta = seq (0,1,by=0.1)
beta2 = 0.9 * delta + 0.1 * beta1
beta2
delta
beta1
0.9 * delta + 0.1 * beta1
(0.9 * delta) + (0.1 * beta1)
0.9 * delta
0.1 * beta1
curve(x*x)
curve(x*x, xlim = c(-10,10))
curve(x*x, xlim = c(-10,10), col = "red")
curve(x*x, xlim = c(0,1), col = "red")
curve(x*x, xlim = c(0,1), col = "blue")
curve(x*x, xlim = c(0,1), col = "blue", lty = 1)
curve(x*x, xlim = c(0,1), col = "blue", lty = 2)
curve(x*x, xlim = c(0,1), col = "blue", lty = 3)
curve(x*x, xlim = c(0,1), col = "blue", lty = 4)
curve(x*x, xlim = c(0,1), col = "blue", lty = 5)
curve(x*x, xlim = c(0,1), col = "blue", lty = 16)
curve(x*x, xlim = c(0,1), col = "blue", pch = "o")
curve(x*x, xlim = c(0,1), col = "blue", pch = "x")
curve(x*x, xlim = c(0,1), col = "blue", pch = 1)
curve(x*x, xlim = c(0,1), col = "blue", pch = 2)
curve(x*x, xlim = c(0,1), col = "blue", pch = 8)
curve(x, xlim = c(0,1), lty = 1, xlab = "send_proportion", ylab = "current_trust")
curve(x * 1, xlim = c(0,1), lty = 1, xlab = "send_proportion", ylab = "current_trust")
curve (log (x * (exp(1) - 1) + 1), lty = 2)
curve(x * 1, xlim = c(0,1), lty = 1, xlab = "send_proportion", ylab = "current_trust")
curve (log (x * (exp(1) - 1) + 1), lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), add = TRUE, lty = 3)
curve (log(x * (exp(1) - 1) + 1), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value")
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value")
legend(2000,9.5, # places a legend at the appropriate place c(“Health”,”Defense”), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c(“blue”,”red”)) # gives the legend lines the correct color and width
legend (c("A","B"), lty = c(1,1), col = c("blue","red"))
legend (legend = c("A","B"), lty = c(1,1), col = c("blue","red"))
legend (1,1,legend = c("A","B"), lty = c(1,1), col = c("blue","red"))
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 10)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 1, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 1, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 2, add = TRUE)
?abline
abline (a = 0, b = 3/4, xlim = c(0,1), add = TRUE, lwd = 2, lty =)
abline (a = 0, b = 3/4, xlim = c(0,1), add = TRUE, lwd = 2, lty =2)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
dev.off()
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 1, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 1, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 1, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2, add = TRUE)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 3)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 1, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 1, add = TRUE)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3, add = TRUE)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 3, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 3, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 3, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 3, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2, add = TRUE)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2))
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), ccex = 0.5)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.5)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.7)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3)
> curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 3, add = TRUE)
> curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 3, add = TRUE)
> curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 3, add = TRUE)
> curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 3, add = TRUE)
> segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2, add = TRUE)
Warning message:
In segments(x0 = 0, y0 = 0, x1 = 2/3, y1 = 1/2, lwd = 1, lty = 2,  :
"add" is not a graphical parameter
> segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
> segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: In segments(x0 = 1, y0 = 1, x1 = 1/3, y1 = 1/2, lwd = 2, lty = 2,  :
"add" is not a graphical parameter
> segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: "add" is not a graphical parameter
4: "add" is not a graphical parameter
5: In segments(x0 = 0, y0 = 0, x1 = 1/3, y1 = 1/2, lwd = 2, lty = 2,  :
"add" is not a graphical parameter
> curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: "add" is not a graphical parameter
4: "add" is not a graphical parameter
5: "add" is not a graphical parameter
6: "add" is not a graphical parameter
> curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
Error in eval(expr, envir, enclos) : object 'e' not found
In addition: Warning messages:
1: "add" is not a graphical parameter
2: "add" is not a graphical parameter
3: "add" is not a graphical parameter
4: "add" is not a graphical parameter
5: "add" is not a graphical parameter
6: "add" is not a graphical parameter
> curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 1, lty = 3)
curve (x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 2, lty = 3, add = TRUE)
curve (x * x * x, xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 3, lty = 3, add = TRUE)
curve (sqrt(x), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 4, lty = 3, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1), xlab = "Send proportion", ylab = "Current trust value", lwd = 5, lty = 3, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.7)
curve (x * 1, xlim = c(0,1), xlab = "Send proportion", ylab = "current_trust", lwd = 1, lty = 3)
curve (x * x, xlim = c(0,1), lwd = 2, lty = 3, add = TRUE)
curve (x * x * x, xlim = c(0,1), lwd = 3, lty = 3, add = TRUE)
curve (sqrt(x), xlim = c(0,1),  lwd = 4, lty = 3, add = TRUE)
curve (x ^ (1/3), xlim = c(0,1),  lwd = 5, lty = 3, add = TRUE)
segments(x0 = 0, y0 = 0, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 1, y0 = 1, x1 = 2/3,y1=1/2, lwd = 1, lty = 2)
segments(x0 = 01, y0 = 01, x1 = 1/3,y1=1/2, lwd = 2, lty = 2)
segments(x0 = 0, y0 = 0, x1 = 1/3,y1=1/2, lwd = 2, lty = 2, add = TRUE)
curve ((exp(x) - 1)/(exp(1) - 1), xlim = c(0,1), lwd = 1, lty = 1, add = TRUE)
curve(log(x*(e-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
curve(log(x*(exp(1)-1) + 1), xlim = c(0,1), lwd = 2, lty = 1, add = TRUE)
legend(legend = c("f1","f2","f3","f4","f5","f6","f7","f8","f9"), x = 0.8, y = 0.5, lty = c(3,3,3,3,3,2,2,1,1), lwd = c(1,2,3,4,5,1,2,1,2), cex = 0.7)
x <- seq (0,1,length=10000)
y <- dnorm(x, mean = 0.2, sd = 0.15)
plot(x, y, xlim = (0,1))
plot(x, y, xlim = c(0,1))
plot(x, y, xlim = c(0,1), type = "l", lwd = 1)
hist(y)
barplot(y)
barplot(y, density = 1)
barplot(y, density = 20)
plot(dnorm(x))
memory.limit()
.Random.seed
install.packages("deepnet")
library(deepnet)
Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
x <- matrix(c(Var1, Var2), nrow = 100, ncol = 2)
y <- c(rep(1, 50), rep(0, 50))
x
y
dnn <- sae.dnn.train(x, y, hidden = c(5, 5))
test_Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
test_Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
test_x <- matrix(c(test_Var1, test_Var2), nrow = 100, ncol = 2)
test_x
nn.test(dnn, test_x, y)
y = c(rep(1,30),rep(2,30),rep(0,40))
nn.test(dnn, test_x, y)
Var1 <- c(rep(1, 50), rep(0, 50))
Var2 <- c(rep(0, 50), rep(1, 50))
x3 <- matrix(c(Var1, Var2), nrow = 100, ncol = 2)
r1 <- rbm.train(x3, 3, numepochs = 20, cd = 10)
h <- c(0.2, 0.8, 0.1)
v <- rbm.down(r1, h)
v
Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
x <- matrix(c(Var1, Var2), nrow = 100, ncol = 2)
y <- c(rep(1, 50), rep(0, 50))
nn <- nn.train(x, y, hidden = c(5))
test_Var1 <- c(rnorm(50, 1, 0.5), rnorm(50, -0.6, 0.2))
test_Var2 <- c(rnorm(50, -0.8, 0.2), rnorm(50, 2, 1))
test_x <- matrix(c(test_Var1, test_Var2), nrow = 100, ncol = 2)
err <- nn.test(nn, test_x, y)
err
test_x
y
nn
nn.predict(test_x)
nn.predict(nn,test_x)
nn.test(nn, test_x, y)
nn.test(nn, test_x, y, t = 0.3)
y = c (rep(0,20),rep(1,20),rep(2,60))
length(y)
y = as.factor(y)
y
y = as.character(y)
y
y = as.factor(y)
y
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
class(y)
y = data.matrix(y)
y
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
x
y
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
dnn <- nn.train(x, y, hidden = c(5, 5))
y = as.vector(y)
y
dnn <- nn.train(x, y, hidden = c(5, 5))
y = c (rep(0,20),rep(1,20),rep(2,60))
dnn <- dbn.dnn.train(x, y, hidden = c(5, 5))
nn.predict(nn, test_x)
setwd("~/workspace/wiki_article_quality_prediction/pnn")
source("PNN.R")
runAll()
source("PNN.R")
runAll()
data = loadData()
str(data)
source("PNN.R")
data = loadData()
str(data)
runAll()
str(data)
data[1]
train = data[1]
str(train)
train = data[[1]
]
str(train)
source("PNN.R")
runAll()
str(train)
train_frame = train
y = train_frame[,ncol(train_frame)]
train_frame[,ncol(train_frame)] = NULL
train_frame = scale(train_frame)
train_frame = cbind (as.factor(y), train_frame)
source("PNN.R")
source("PNN.R")
runAll()
source("PNN.R")
runAll()
source("PNN.R")
runAll()
source("PNN.R")
runAll()
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
model_performance[[1]]
pred = factor(model_performance[[2]], levels = c("stub", "start","c","b","ga","fa"))
actual = factor(model_performance[[1]], levels = c("stub", "start","c","b","ga","fa"))
head (pred)
t = table (actual, pred)
t
head (actual)
actual = factor(model_performance[[1]], levels = c("stub", "start","c","b","ga","fa"))
head (actual)
length(pred)
y = test_frame[,ncol(test_frame)]
y = test_frame[,ncol(data[[2]])]
test_frame = data[[2]]
y = test_frame[,ncol(test_frame)]
head (y)
a = c()
a = c(a, y[1])
a
model_performance
str(model_performance)
actual = model_performance[[1]]
head(actual)
actual = factor(actual)
head(actual)
actual = factor(actual, levels = c("stub", "start","c","b","ga","fa"))
head (actual)
actual = character(actual, levels = c("stub", "start","c","b","ga","fa"))
y
a = c()
a = c(a, as.factor(y[1]))
a
actual = as.factor(model_performance[[1]], levels = c("stub", "start","c","b","ga","fa"))
actual = as.factor(model_performance[[1]], labels = c("stub", "start","c","b","ga","fa"))
actual = as.factor(model_performance[[1]], labels = c("stub", "start","c","b","ga","fa"), levels = 1:6)
actual = factor(model_performance[[1]], labels = c("stub", "start","c","b","ga","fa"), levels = 1:6)
table (actual, pred)
head (actual)
head (pred)
head (model_performance[[1]])
head (model_performance[[2]])
as.factor(model_performance[[1]])
as.factor(model_performance[[2]])
str(model_performance[[1]])
factor (c("stub", "start","c","b","ga","fa")[model_performance[[1]]])
actual = factor (c("stub", "start","c","b","ga","fa")[model_performance[[1]]])
head (actual)
head (pred)
seed = 2015
source("PNN.R")
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
source("PNN.R")
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
# Building confusion matrix
pred = factor(model_performance[[2]], levels = c("stub", "start","c","b","ga","fa"))
actual = factor (c("stub", "start","c","b","ga","fa")[model_performance[[1]]])
warnings()
t = table (actual, pred)
t
head (model_performance[[1]])
head (model_performance[[2]])
tail (model_performance[[2]])
tail (model_performance[[1]])
head (actual)
length(actual)
head (model_performance[[1]])
head (model_performance[[2]])
test_frame = data[[2]]
head (test_frame$V25)
model_performance[[2]]
t = table (data[[2]][,ncol(data[[2]])], pred)
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
source("PNN.R")
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
model_performance
source("PNN.R")
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
source("PNN.R")
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
model_performance
model_performance[1]
model_performance[[1]]
model_performance[[2]]
x = model_performance[[1]]
y = model_performance[[2]]
table (x,y)
x = factor (c("stub", "start","c","b","ga","fa")[model_performance[[1]]])
y = factor (c("stub", "start","c","b","ga","fa")[model_performance[[2]]])
x
y
y = factor(model_performance[[2]], levels = c("stub", "start","c","b","ga","fa"))
y
x = factor(model_performance[[1]], levels = c("stub", "start","c","b","ga","fa"))
x
source("PNN.R")
runAll()
x
y
print ("Loading data")
data = loadData()
print ("Building model")
model = buildModel (train_frame = data[[1]])
print ("Perform the model")
model_performance = performModel (model = model, test_frame = data[[2]])
# Building confusion matrix
actual = factor(model_performance[[1]], levels = c("stub", "start","c","b","ga","fa"))
pred = factor(model_performance[[2]], levels = c("stub", "start","c","b","ga","fa"))
t = table (actual, pred)
t
actual
pred
source("PNN.R")
runAll()
source("PNN.R")
runAll()
